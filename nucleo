/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define deviceAddress 0x55

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */


//Menu
uint8_t inciso;
uint8_t opciones[1];


//Spi
uint8_t led_tiempo[9];
uint8_t datos_spi[4];
uint8_t color ;
uint8_t tiempo ;
char *coma;
char *ledStr;
char *tiempoStr;


//I2C
uint8_t sensor [4];



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void desplegar_menu(void)
//muestra un menú a través de UART
//HAL_UART_Transmit función definida envía el texto del menú a través del puerto UART.
{
uint8_t menu[]="\nSeleccione la opcion que quiere: \n";
uint8_t opcion1[]="1) Controlar leds SPI \n";
uint8_t opcion2[]="2) Obtener medicion de Sensor \n";
    HAL_UART_Transmit(&huart2, menu, sizeof(menu), 100);
    HAL_UART_Transmit(&huart2, opcion1, sizeof(opcion1), 100);
    HAL_UART_Transmit(&huart2, opcion2, sizeof(opcion2), 100);
}


void conexión_spi(uint8_t color, int tiempo) {
    datos_spi[0] = color;
    datos_spi[1] = tiempo;

    HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
// SPI no bloqueante del video
    HAL_SPI_Transmit(&hspi1, datos_spi, sizeof(datos_spi), HAL_MAX_DELAY);
//HAL_MAX_DELAY hace que el programa espere indefinidamente
    HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_SET);
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */


  //Condicion inical
    desplegar_menu();
    HAL_UART_Receive(&huart2, opciones, 1, HAL_MAX_DELAY);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  //Escoger modo

	  	  inciso=opciones[0];

	  	  if (inciso == '1') {

	  	uint8_t ledtiempo[]="\nIngrese el LED y el tiempo en milisegundos separados por una coma (1) Verde - 2) Amarillo - 3) Rojo)\n ";
	  	      HAL_UART_Transmit(&huart2, ledtiempo, sizeof(ledtiempo), 100);
	  	      HAL_UART_Receive(&huart2, led_tiempo, sizeof(led_tiempo), HAL_MAX_DELAY);

	  	      // Buscar la coma en la cadena
	  	      coma = strchr((char *) led_tiempo, ',');
// busca una ledd sino no funciona
	  	      if (coma != NULL) {
	  	          *coma = '\0';
	  	          ledStr = (char *) led_tiempo;
	  	          //se salta la led
	  	          tiempoStr = coma + 1;

	  	        // No acepta nada mas que sea comas
	  	        // Elimina espacios y caracteres extra del tiempo
	  	          while (*tiempoStr == ' ' || *tiempoStr == '\n' || *tiempoStr == '\r') {
	  	              tiempoStr++;
	  	          }

	  	         // aqui se define la coma, el espacio y el enter de las leds
	  	          char *end = tiempoStr + strlen(tiempoStr) - 1;
	  	          while (end >= tiempoStr && (*end == '\n' || *end == '\r' || *end == ' ')) {
	  	              *end-- = '\0';
	  	          }

	  	          // Convertir a enteros para el ESP32 y dividir en 10
	  	          //de la lbreria string

	  	          tiempo = atoi(tiempoStr)/10;
	  	          color = atoi(ledStr);

	  	          // Validar que los datos ingresados sean válidos para usar el SPI
	  	          // si es mas de 3 no funciona
	  	          if ((color >= 1 && color <= 3) && (tiempo > 0)) {

	  	              // Funcion SPI
	  	              conexión_spi (color, tiempo);
	  	    //funcion de error de chat
	  	          } else {
	  uint8_t error1[] = "Error: Asegúrese de ingresar un led o tiempo valido\n";
	  	              HAL_UART_Transmit(&huart2, error1, sizeof(error1), 100);
	  	          }

	  	      } else {
	  uint8_t error_formato[] = "Error: Formato incorrecto.\n";
	  	          HAL_UART_Transmit(&huart2, error_formato, sizeof(error_formato), 100);
	  	      }

	  	      // mostrar menu
	  	desplegar_menu();
	  HAL_UART_Receive(&huart2, opciones, 1, HAL_MAX_DELAY);

	  	  }



	  	  //Uart recive para que espere la entrada por uart
	  	  else if(inciso == '2') {
	  	      HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1) | 0x01, (uint8_t *)sensor, 1, HAL_MAX_DELAY);

	  uint8_t valor[]="\nEl valor del sensor es: \n";
	  	      HAL_UART_Transmit(&huart2, valor, sizeof(valor), HAL_MAX_DELAY);

	  	      sprintf((char *)sensor, "%d\n", sensor[0]);
	  	      HAL_UART_Transmit(&huart2, sensor, strlen((char *)sensor), HAL_MAX_DELAY);

	  	      HAL_Delay(1000);

	  	      // Volver a mostrar menu
	  	      desplegar_menu();
	  HAL_UART_Receive(&huart2, opciones, 1, HAL_MAX_DELAY);
	  	  }



	  	 else {

	  		 uint8_t error_opcion[]="\nError, seleccionar una opcion valida \n";
	  		HAL_UART_Transmit(&huart2, error_opcion,sizeof(error_opcion), 100);

	  		desplegar_menu();
	  HAL_UART_Receive(&huart2, opciones, 1, HAL_MAX_DELAY);

	  	  	  	  }





    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
