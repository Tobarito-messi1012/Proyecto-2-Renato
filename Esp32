#include <Arduino.h>      // Librería principal para trabajar con Arduino
#include <Wire.h>          // Librería para comunicación I2C
#include <ESP32SPISlave.h> // Librería para configurar el ESP32 como esclavo SPI

// Dirección del dispositivo esclavo I2C
#define I2C_DEV_ADDR 0x55  

// Definición de los pines utilizados
#define potenciometro 36   // Pin analógico donde está conectado el potenciómetro
#define led1 26            // Pin para el LED 1 (color definido por el usuario)
#define led2 14            // Pin para el LED 2 
#define led3 12            // Pin para el LED 3

// Variables globales
int tiempo_espera;         // Almacena el tiempo que el LED estará encendido
uint8_t color;             // Define qué LED encender (se recibe por SPI)

ESP32SPISlave slave;       // Instancia del objeto ESP32 como esclavo SPI
static constexpr size_t BUFFER_SIZE = 32;  // Tamaño del buffer de recepción SPI
uint8_t buffer_rx[BUFFER_SIZE];            // Buffer para almacenar datos recibidos por SPI

uint16_t voltaje;          // Variable para almacenar la lectura del potenciómetro
uint8_t mapeo;             // Valor mapeado del potenciómetro para enviar por I2C

// Función callback para la comunicación I2C
void onRequest();  // Se ejecutará cuando el maestro I2C solicite datos

void setup() {
  Serial.begin(115200);  // Inicializa la comunicación serial a 115200 baudios
  delay(1000);           // Espera de un segundo para estabilidad

  // Configura los pines de los LEDs como salidas
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);

  // Asegura que los LEDs comiencen apagados
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);

  // Configura el modo de datos para SPI en modo 0
  slave.setDataMode(SPI_MODE0);
  slave.setQueueSize(1);  // Tamaño de la cola de mensajes SPI: 1 mensaje
  slave.begin(VSPI);      // Inicializa la interfaz SPI en el bus VSPI

  // Limpia el buffer de recepción SPI (inicializa todo a 0)
  memset(buffer_rx, 0, BUFFER_SIZE);

  // Configura la función callback para la comunicación I2C
  Wire.onRequest(onRequest);
  Wire.begin((uint8_t)I2C_DEV_ADDR);  // Inicia I2C como esclavo con la dirección especificada
}

void loop() {
  // Espera a que se reciba un mensaje por SPI
  slave.wait(buffer_rx, NULL, BUFFER_SIZE);

  // Si hay datos disponibles en el buffer SPI, se procesan
  while (slave.available()) {
    tiempo_espera = buffer_rx[1];  // Segundo byte indica el tiempo de espera
    color = buffer_rx[0];          // Primer byte indica qué LED encender
    slave.pop();  // Libera los datos procesados del buffer SPI
  }

  // Enciende el LED correspondiente durante el tiempo recibido
  if (color == 1) {               // Si el valor es 1, enciende el LED 1
    digitalWrite(led1, HIGH);  
    delay(tiempo_espera * 10);     // Espera el tiempo especificado (escalado por 10)
    digitalWrite(led1, LOW);       // Apaga el LED
    Serial.println(tiempo_espera); // Imprime el tiempo en la consola serial
    color = 0;                     // Reinicia la variable color para evitar reactivación
  } else if (color == 2) {         // Si el valor es 2, enciende el LED 2
    digitalWrite(led2, HIGH);  
    delay(tiempo_espera * 10);     
    digitalWrite(led2, LOW); 
    color = 0;                     
  } else if (color == 3) {         // Si el valor es 3, enciende el LED 3
    digitalWrite(led3, HIGH);  
    delay(tiempo_espera * 10);     
    digitalWrite(led3, LOW); 
    color = 0;                     
  }
}

// Función callback que se ejecuta cuando el maestro I2C solicita datos
void onRequest() {
  voltaje = analogRead(potenciometro);    // Lee el valor analógico del potenciómetro
  mapeo = map(voltaje, 0, 4095, 0, 255);  // Mapea el valor (0-4095) a un rango de 0-255
  Wire.write(mapeo);  // Envía el valor mapeado por I2C al maestro
}
